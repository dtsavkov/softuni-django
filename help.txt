Lecture Timing > "Django Web Development - Django Project - Furniture shop - март 2019 - Инес Иванова"
YouTube URL > https://www.youtube.com/watch?v=9zVtSrk8CE0


Create more than 1 application = 1:22:30 <> 1:32:30
Link ProfileUser to DJANGO user = 1:32:30 <> 1:37:00
Edit NAVBAR = 1:37:00 <> 1:47:00
User Restrictions = 1:47:00 <> 2:06:00
Unit Create Function = 2:17:00 <> 2:54:00
Unit Display Function = 2:54:00 <> 3:00:30
Include Reviews = 3:00:30 <> 3:xx:00
Unit Edit Function = 3:xx:00 <> 3:xx:00


------------------------------------------------------------------------------------

1. Create Project folder
	- D:\PERSONAL\VEMV\django_final\smplus_shop

2. Create VENV environment
	- CMD > D:\PERSONAL\VEMV\django_final>python -m venv D:\PERSONAL\VEMV\django_final

3. Activate VENV
	- CMD > D:\PERSONAL\VEMV\django_final>cd Scripts
			D:\PERSONAL\VEMV\django_final\Scripts>activate

4. Upgrade PIP
	- CMD > (django_final) D:\PERSONAL\VEMV\django_final\Scripts>python -m pip install --upgrade pip

5. Install DJANGO
	- CMD > (django_final) D:\PERSONAL\VEMV\django_final\Scripts>pip install Django

6. Create Project
	- CMD > (django_final) D:\PERSONAL\VEMV\django_final>django-admin startproject smplus_shop

7. Create Applications
	- CMD > (django_final) D:\PERSONAL\VEMV\django_final>cd smplus_shop
			(django_final) D:\PERSONAL\VEMV\django_final\smplus_shop>python manage.py startapp accounts
			(django_final) D:\PERSONAL\VEMV\django_final\smplus_shop>python manage.py startapp common
			(django_final) D:\PERSONAL\VEMV\django_final\smplus_shop>python manage.py startapp units

8. Add Applications to 'settings.py'
9. Create 'urls.py' for all applications

10. INCLUDE following to project_name/urls.html:
	> from django.contrib import admin
	> from django.urls import path, re_path, include

10. Create 'templates' folders for all applications

11. Create ACCOUNTS - URLS & VIEWS & HTML Templates

12. Make & Apply MIGRATION:
	- CMD > python manage.py makemigrations
			python manage.py migrate
	! Migrations are needed on MODELS.py changes

13. Create SUPER USER:
	- CMD > python manage.py createsuperuser
			dtsavkov / turbo235

14. Commit to GitHub		(https://git-scm.com/docs/git-commit)
	- Install > Git-2.21.0-64-bit.exe
	- Restart
	- Create GIT repository & Take link
	- command line project directory:
		> git init
		> git remote add origin https://github.com/dtsavkov/softuni-django.git		# link to repository
		> git add .
	- PyCharm
		- File > Settings > Version control
			- add directory - D:\PERSONAL\VEMV\django_final\smplus // git
		- GitHub
			- add account
		- Git
			- add path to C:\Program Files\Git\bin\git.exe
	- Select project folder from the tree
	- VCS > Git > Commit directory
	
	- Other commands:
		> git remote show origin
		> git commit -m Initial Commit
	
	- UPDATES
		- Add new files (red to green)
		- VCS > Git > Commit Folder
		- VCS > Git > Push

15. Add APPLICATIONS to admin.py (for each application)
	- from django.contrib import admin
	- from .models import Units, UnitType
	- admin.site.register(Units)
	- admin.site.register(UnitType)
	
	- from django.contrib import admin
	- from .models import ProfileUser
	- admin.site.register(ProfileUser)

16. Update NAVBAR with required permissions

17. Create 'forms.py' under app = units

18. Create 'unit_create.html' template

19. Update units \ views, urls, templates

20. Make it beautiful = apply CSS
    - create folder units\static
    - create css file

21. Include CSS file(s) in index.html AFTER BOOTSTRAP
    - {% load static %}
    - <link rel="stylesheet" type="text/css" href="{% static 'reviews.css' %}">
    ! if CSS is not applied you have to clear 'Cached images and files'

22. Create 'unit_details.html' template

23. Update units \ views, urls, 'units_list.html' template
    - <a href="{% url 'unit-details' %} unit.id" class="btn btn-primary">See details</a>       # include "unit.id" to specify which unit to present

24. Include REVIEWS as COPY-PASTE from previous project
    - create folder 'reviews'
    - paste all necessary files to it
    - update smplus_shop \ settings (add application), urls (add reviews urls)
    - update all REVIEWS files to current project (change item's name, etc.)
    - update units \ views.py > class UnitDetails to be able to handle more than 1 'context_object_name'

25. Create 'unit_delete.html' template
    ! input type="submit" value="Confirm"       # to work must be in this way 'input' not 'button' & "Confirm"

26. Add task into the code with '# T0D0 something'

27. Protect CREATE unit HTML
    - from django.contrib.auth.mixins import LoginRequiredMixin
    - add 'LoginRequiredMixin' to class >> class UnitCreate(LoginRequiredMixin, generic.CreateView)

28. Add EDIT unit functionality

29. Add CREATE unit-type functionality

30. 'units_list.html' & 'unit_details.html' - make price visible only for STUFF USER

31. Create Landing Page
    - Welcome + Log in + Register

32. Include UnitType FULL CRUD
    - units\views.py [define classes] & units\forms.py [UnitTypeForm]

33. Add link to 'Log in' page on 'common\permission_denied.html' or auto-redirect in 5 seconds

34. Modify page title != 'Title' for all pages

------------------------------------------------------------------------------------

40. Unit Details (form) model / name / short description / long description / type / price / user manual / announced date

41. Make REVIEWS working!

43.* Add 'favicon.ico'

xx. [DROP] Improve Landing Page
    * create landing page image to be dynamic
        - when upload new photo - the old one to be replaced with just uploaded image scr attribute

xx. [DROP] Check Admin Panel - Add Unit - Type "+" create new type to not be visible for != Super Users

------------------------------------------------------------------------------------
KNOWN ISSUES:

1. NAVBAR > Profile User not pointing to DJANGO User ID but to Extended User ID


------------------------------------------------------------------------------------

51. Create README file:

	# Django-final-project-example

	## Urls:

	#### Authentication (non-authenticated)

	###### /auth/login/
	###### /auth/register/

	#### Furniture (authenticated)

	###### /furniture/create/
	###### /furniture/all/ (non-authenticated)
	###### /furniture/details/{pk}/
	###### /furniture/mine/
	###### /furniture/delete/{pk}/
	###### /furniture/edit/{pk}/   (post method creates new review)
	###### /furniture/material/ (admin users)


52. Create Requirements file:

	Django==2.2
	django-discover-runner==1.0
	django-role-permissions==2.2.1
	Pillow==6.0.0
	pytz==2019.1
	six==1.12.0
	sqlparse==0.3.0


99. Check D:\PERSONAL\Programming Projects\Python\Python Django 2019.02\Links.docx


------------------------------------------------------------------------------------

{% extends 'index.html' %}
{% block 'body' %}
{% endblock %}

------------------------------------------------------------------------------------

USERS:

dtsavkov // turbo235 // Admin
super-user // alabala123 // Active + Stuff + Super
stuff-user // alabala123 // Active + Stuff
simple-user // alabala123 // Active

------------------------------------------------------------------------------------

UNITS creation distribution:

dtsavkov // SM 9xx
super-user // SM 7xx
stuff-user // SM 8xx
simple-user // SM 6xx
